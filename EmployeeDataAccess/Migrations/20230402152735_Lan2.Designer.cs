// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VodkaDataAccess;

#nullable disable

namespace VodkaDataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230402152735_Lan2")]
    partial class Lan2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VodkaEntities.Category", b =>
                {
                    b.Property<string>("CatId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CatName")
                        .HasColumnType("longtext");

                    b.Property<string>("Descript")
                        .HasColumnType("longtext");

                    b.Property<string>("IsActive")
                        .HasColumnType("longtext");

                    b.HasKey("CatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VodkaEntities.Paymentmethod", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descript")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentName")
                        .HasColumnType("longtext");

                    b.HasKey("PaymentId");

                    b.ToTable("Paymentmethods");
                });

            modelBuilder.Entity("VodkaEntities.Product", b =>
                {
                    b.Property<string>("ProductNum")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CatId")
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryCatId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Descript")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageSource")
                        .HasColumnType("longtext");

                    b.Property<string>("IsActive")
                        .HasColumnType("longtext");

                    b.Property<string>("Price")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<string>("Quan")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax1")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax2")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax3")
                        .HasColumnType("longtext");

                    b.HasKey("ProductNum");

                    b.HasIndex("CategoryCatId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("VodkaEntities.Taxinfo", b =>
                {
                    b.Property<string>("TaxId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaxDes")
                        .HasColumnType("longtext");

                    b.Property<string>("TaxRate")
                        .HasColumnType("longtext");

                    b.HasKey("TaxId");

                    b.ToTable("Taxinfos");
                });

            modelBuilder.Entity("VodkaEntities.Transactdetail", b =>
                {
                    b.Property<string>("TransactDetailId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CostEach")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductNum")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Quan")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax1")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax2")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax3")
                        .HasColumnType("longtext");

                    b.Property<string>("Total")
                        .HasColumnType("longtext");

                    b.Property<string>("TransactId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TransactDetailId");

                    b.HasIndex("ProductNum");

                    b.HasIndex("TransactId");

                    b.ToTable("Transactdetails");
                });

            modelBuilder.Entity("VodkaEntities.Transactheader", b =>
                {
                    b.Property<string>("TransactId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Net")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax1")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax2")
                        .HasColumnType("longtext");

                    b.Property<string>("Tax3")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TimePayment")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Total")
                        .HasColumnType("longtext");

                    b.Property<string>("WhoPay")
                        .HasColumnType("longtext");

                    b.HasKey("TransactId");

                    b.ToTable("Transactheaders");
                });

            modelBuilder.Entity("VodkaEntities.Useraccount", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TotalCash")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Useraccounts");
                });

            modelBuilder.Entity("VodkaEntities.Product", b =>
                {
                    b.HasOne("VodkaEntities.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryCatId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VodkaEntities.Transactdetail", b =>
                {
                    b.HasOne("VodkaEntities.Product", "Product")
                        .WithMany("Transactdetail")
                        .HasForeignKey("ProductNum");

                    b.HasOne("VodkaEntities.Transactheader", "Transactheader")
                        .WithMany("Transactdetail")
                        .HasForeignKey("TransactId");

                    b.Navigation("Product");

                    b.Navigation("Transactheader");
                });

            modelBuilder.Entity("VodkaEntities.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("VodkaEntities.Product", b =>
                {
                    b.Navigation("Transactdetail");
                });

            modelBuilder.Entity("VodkaEntities.Transactheader", b =>
                {
                    b.Navigation("Transactdetail");
                });
#pragma warning restore 612, 618
        }
    }
}
